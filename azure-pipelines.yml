trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

parameters:
  targetVMs:
    - name: vm1
      sshServiceConnection: 'vm1-ssh'
      targetPath: '/opt/simple-cli'
    - name: vm2
      sshServiceConnection: 'vm2-ssh'
      targetPath: '/opt/simple-cli'

variables:
  buildConfiguration: 'release'
  artifactName: 'simple-cli-artifact'

steps:

  # 1. Checkout source code
  - task: Checkout@1

  # 2. Install Rust
  - script: |
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      source $HOME/.cargo/env
      rustup update
    displayName: 'Install Rust'

  # 3. Build the CLI in release mode
  - script: |
      source $HOME/.cargo/env
      cargo build --release
    displayName: 'Build CLI'

  # 4. Prepare artifact folder
  - script: |
      mkdir -p $(Build.ArtifactStagingDirectory)/simple-cli
      cp target/release/simple-cli $(Build.ArtifactStagingDirectory)/simple-cli/
      cp commands.yaml $(Build.ArtifactStagingDirectory)/simple-cli/
      cp subscriptions.yaml $(Build.ArtifactStagingDirectory)/simple-cli/
    displayName: 'Copy binary, commands.yaml, and config.yaml to artifact folder'

  # 5. Publish artifact
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/simple-cli'
      artifact: '$(artifactName)'
      publishLocation: 'pipeline'

  # 6. Download artifact for deployment
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '$(artifactName)'
      path: '$(Pipeline.Workspace)/simple-cli'
    displayName: 'Download artifact'

  # 7. Backup existing commands.yaml if it exists
  - ${{ each vm in parameters.targetVMs }}:
      - task: SSH@0
        inputs:
          sshEndpoint: ${{ vm.sshServiceConnection }}
          runOptions: 'commands'
          commands: |
            if [ -f ${{ vm.targetPath }}/commands.yaml ]; then
              timestamp=$(date +%Y%m%d%H%M%S)
              cp ${{ vm.targetPath }}/commands.yaml ${{ vm.targetPath }}/commands.yaml.bak.$timestamp
              echo "Existing commands.yaml backed up as commands.yaml.bak.$timestamp"
            fi
        displayName: 'Backup existing commands.yaml on ${{ vm.name }}'

  # 8. Deploy the artifact (binary + commands.yaml)
  - ${{ each vm in parameters.targetVMs }}:
      - task: CopyFilesOverSSH@0
        inputs:
          sshEndpoint: ${{ vm.sshServiceConnection }}
          sourceFolder: '$(Pipeline.Workspace)/simple-cli'
          contents: '**'
          targetFolder: ${{ vm.targetPath }}
          cleanTargetFolder: false
          overwrite: true
        displayName: 'Deploy CLI artifact to ${{ vm.name }}'

  # 9. Optional: set executable permissions and verify binary
  - ${{ each vm in parameters.targetVMs }}:
      - task: SSH@0
        inputs:
          sshEndpoint: ${{ vm.sshServiceConnection }}
          runOptions: 'commands'
          commands: |
            chmod +x ${{ vm.targetPath }}/simple-cli
            ${{ vm.targetPath }}/simple-cli --version
        displayName: 'Set permissions and verify CLI on ${{ vm.name }}'